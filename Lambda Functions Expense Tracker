def add_expense(expenses, amount, category):
    expenses.append({'amount': amount, 'category': category})
# In the above statement, 'amount' is a string being used as a key, whilst amount is the value of the pair "'amount': amount" contained within {}. Pairs are seperated with a ",".

def print_expenses(expenses):
    for expense in expenses:
        print(f'Amount: {expense["amount"]}, Category: {expense["category"]}')
# In the above statement, I have modified the f-string expression to access the value of the 'amount' key and the 'category' key in the expense dictionary.

# Below is a new function definition of "total_expenses" with the value of "expenses".
def total_expenses(expenses):
    lambda expense: expense['amount']
# The above lambda function uses 'expense' as the paramater and returns the value of the 'amount' key in the 'expense' dictionary. 

# The below is a test variable with a lambda function value of 'x * 2'.
test = lambda x: x * 2
print(sum(map(test, [2, 3, 5, 8])))
# The above is a print call to print the lambda function with variable_name 'test' using with '(3)' as the argument.
# It is also a 'sum()' command with 'map()' as the value.

expenses = []