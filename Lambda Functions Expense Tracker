def add_expense(expenses, amount, category):
    expenses.append({'amount': amount, 'category': category})
# In the above statement, 'amount' is a string being used as a key, whilst amount is the value of the pair "'amount': amount" contained within {}. Pairs are seperated with a ",".

def print_expenses(expenses):
    for expense in expenses:
        print(f'Amount: {expense["amount"]}, Category: {expense["category"]}')
# In the above statement, I have modified the f-string expression to access the value of the 'amount' key and the 'category' key in the expense dictionary.

# Below is a new function definition of "total_expenses" with the value of "expenses".
def total_expenses(expenses):
    return sum(map(lambda expense: expense['amount'], expenses))
# The above lambda function uses "expense" as the paramater and returns the value of the "'amount'"" key in the 'expense' dictionary. 
# The "return" command above should return the result of the "sum()" function.

# Below is a function defined as "filter_expenses_by_category", containing 2... Variables?
def filter_expenses_by_category(expenses, category):
    return filter(lambda expense: expense['category'] == category, expenses)
# Above is a plain lambda function, using "expense" as the parameter and returning the comparison between the value of the "'category'" key of the "expense" dictionary and "category".
# It is also now being used in a "filter()" function which allows you to select items from an iterable, such as a list, based on the output of a function.
# In my example above, I have called a "filter()" passing my lambda function as the first argument and the "expenses" list as the second argument.

# The below is a test variable with a lambda function value of "x * 2".
test = lambda x: x * 2
print(sum(map(test, [2, 3, 5, 8])))
# The above is a print call to print the lambda function with variable_name "test" using with "(3)" as the argument.
# It is also a "sum()" command with "map()" as the value.

expenses = []